variables:
  buildNumber: $[ counter('constant', 13000) ] # Start higher than our AppVeyor versions. Every build (pr or branch) will increment.
  integrationTestsBuild: $env:RUNBUILDFORINTEGRATIONTESTS
  
name: 3.0.$(buildNumber)
  
pr:
  branches:
    include:
    - dev
    - release/3.0
    - release/ExtensionsMetadataGenerator/1.1

trigger:
  branches:
    include:
    - dev
    - release/3.0
    - release/ExtensionsMetadataGenerator/1.1

jobs:
- job: InitializePipeline
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'
   
  - task: PowerShell@2
    displayName: 'Initialize'
    name: Initialize
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\initialize-pipeline.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''

- job: BuildArtifacts
  dependsOn: InitializePipeline
  condition: and(succeeded(), or(ne(variables['Build.Reason'], 'PullRequest'), eq(dependencies.InitializePipeline.outputs['Initialize.BuildArtifacts'], true)))
  variables:
    ${{ if or( eq( variables['Build.Reason'], 'PullRequest' ), not( endswith( variables['Build.SourceBranch'], 'release/3.0' ) ) ) }}:
      suffixTemp: ci
      packSuffixSwitchTemp: --version-suffix ci
      emgSuffixSwitchTemp: --version-suffix ci$(buildNumber)
      artifactSuffix: -ci
    suffix: $[variables.suffixTemp] # this resolves to an empty string if it is missing
    packSuffixSwitch: $[variables.packSuffixSwitchTemp]
    emgSuffixSwitch: $[variables.emgSuffixSwitchTemp]
  pool:
    vmImage: 'windows-2019' 
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
      performMultiLevelLookup: true  
  - task: PowerShell@2
    displayName: "Build artifacts"
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\build-extensions.ps1'
      arguments: '-buildNumber "$(buildNumber)" -suffix "$(suffix)" -commitHash "$(Build.SourceVersion)"'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\buildoutput'
      Contents: '*.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: DotNetCoreCLI@2
    displayName: 'Build host packages'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: -o packages -p:BuildNumber=$(buildNumber) -p:CommitHash=$(Build.SourceVersion) -c Release $(packSuffixSwitch)
      projects: |
        **\WebJobs.Script.csproj
        **\WebJobs.Script.WebHost.csproj
        **\WebJobs.Script.Grpc.csproj

  - pwsh: |
      $rootDirectory = $(Build.Repository.LocalPath)
      if (-not (test-path $rootDirectory))
      {​​
        throw "File path '$rootDirectory' does not exist."
      }​​
      Set-Location $rootDirectory
      Get-ChildItem * -Recurse | ForEach-Object {​​ $_.FullName }​​   
    condition: eq(variables['RUNBUILDFORINTEGRATIONTESTS'], 'True')
    displayName: 'Copy package to ArtifactStagingDirectory'
  
